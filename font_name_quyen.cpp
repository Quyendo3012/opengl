#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <stdlib.h>
GLubyte rasters[32] = {
0x00,0x0c,
0x03,0xd0,
0x0c, 0x20,
0x18, 0x30,
0x30, 0x50,
0x31, 0x88,
0x20, 0x08,
0x20, 0x08,
0x20, 0x08,
0x21, 0x88,
0x12, 0x88,
0x12, 0x50,
0x08, 0x10,
0x02, 0x20,
0x01, 0xc0,
0x00, 0x00
};

GLubyte rasters1[18] = {
0x06, 0x90,
0x0c, 0x58,
0x08, 0x20,
0x08, 0x20,
0x28,0x20,
0x18, 0x20,
0x18, 0x20,
0x08, 0x20,
0x08, 0x20,

};


GLubyte rasters2[32] = {
0x00, 0x80,
0x01, 0x40,
0x02, 0x40,
0x03, 0x40,
0x01, 0x40, 
0x00, 0xc0,
0x00, 0x60,
0x00, 0x60,
0x07, 0xd8,
0x04, 0x40,
0x04, 0x44,
0x14, 0x40,
0x0c, 0x40,
0x04, 0x40,
0x40,0x40,
0x44,0x40,

};


GLubyte rasters3[26] = {
0x03, 0x80,
0x04, 0x40,
0x0c, 0x20,
0x08, 0x00,
0x0b, 0xc0,
0x04, 0xc0,
0x0c, 0x40,
0x15, 0x20,
0x22, 0x40,
0x01, 0x80,
0x04, 0x20,
0x02, 0x40,
0x0, 0x80,
};



GLubyte rasters4[18] = {
0x04, 0x10,
0x04, 0x28,
0x04, 0x20,
0x04, 0x20,
0x24, 0x20,
0x25, 0x20,
0x15, 0x20,
0x0b, 0xc0,
0x01, 0x80 

};


void init(void)
{
glPixelStorei (GL_UNPACK_ALIGNMENT, 1);
glClearColor (0.0, 0.0, 0.0, 0.0);

}
void display(void)
{
glClear(GL_COLOR_BUFFER_BIT);
glColor3f (1.0, 1.0, 1.0);
glRasterPos2i (50, 50);
glBitmap (16, 16, 0.0, 0.0, 12.0, 0.0, rasters);
glBitmap (16, 16, 0.0, 0.0, 14.0, 0.0, rasters1);
glBitmap (16, 16, 0.0, 8.0, 12.0, 0.0, rasters2);
glBitmap (16, 16, 0.0, 1.0, 12.0, 0.0, rasters3);
glBitmap (16, 16, 0.0, 1.0, 12.0, 0.0, rasters4);
glFlush();
}
void reshape(int w, int h)
{
glViewport(0, 0, (GLsizei) w, (GLsizei) h);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glOrtho (0, w, 0, h, -1.0, 1.0);
glMatrixMode(GL_MODELVIEW);
}
void keyboard(unsigned char key, int x, int y)
{
switch (key) {
case 27:
exit(0);
}
}
int main(int argc, char** argv)
{
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(600, 600);
glutInitWindowPosition(200, 200);
glutCreateWindow(argv[0]);
init();
glutReshapeFunc(reshape);
glutKeyboardFunc(keyboard);
glutDisplayFunc(display);
glutMainLoop();
return 0;
}
